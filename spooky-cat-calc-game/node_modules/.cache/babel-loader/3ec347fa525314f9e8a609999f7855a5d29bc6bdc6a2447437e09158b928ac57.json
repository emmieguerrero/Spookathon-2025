{"ast":null,"code":"// Sound system using online URLs - NO downloads needed!\n\nconst soundUrls = {\n  // Correct answer sounds\n  correct: 'https://www.soundjay.com/buttons/sounds/button-09.mp3',\n  // Wrong answer sounds\n  wrong: 'https://www.soundjay.com/misc/sounds/fail-buzzer-01.mp3',\n  jumpscare: 'https://www.soundjay.com/misc/sounds/fail-buzzer-02.mp3',\n  // Timer sounds\n  tick: 'https://www.soundjay.com/clock/sounds/clock-1.mp3',\n  timerWarning: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3',\n  // Game sounds\n  gameStart: 'https://www.soundjay.com/misc/sounds/magic-chime-01.mp3',\n  victory: 'https://www.soundjay.com/misc/sounds/magic-chime-02.mp3',\n  // Background music (optional - can be muted)\n  bgMusic: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'\n};\nclass SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.isMuted = false;\n    this.bgMusic = null;\n    this.bgMusicPlaying = false;\n  }\n\n  // Preload sounds for better performance\n  preload() {\n    Object.entries(soundUrls).forEach(([name, url]) => {\n      if (name !== 'bgMusic') {\n        const audio = new Audio(url);\n        audio.preload = 'auto';\n        this.sounds[name] = audio;\n      }\n    });\n  }\n\n  // Play a sound effect\n  playSound(soundName, volume = 1.0) {\n    if (this.isMuted) return;\n    try {\n      let audio;\n\n      // Use preloaded sound or create new one\n      if (this.sounds[soundName]) {\n        audio = this.sounds[soundName];\n        audio.currentTime = 0; // Reset to start\n      } else {\n        audio = new Audio(soundUrls[soundName]);\n      }\n      audio.volume = volume;\n      audio.play().catch(err => {\n        console.log('Audio play prevented:', err.message);\n      });\n    } catch (err) {\n      console.log('Audio error:', err.message);\n    }\n  }\n\n  // Play background music\n  playBackgroundMusic(volume = 0.2) {\n    if (this.isMuted || this.bgMusicPlaying) return;\n    try {\n      this.bgMusic = new Audio(soundUrls.bgMusic);\n      this.bgMusic.volume = volume;\n      this.bgMusic.loop = true;\n      this.bgMusic.play().catch(err => {\n        console.log('Background music play prevented:', err.message);\n      });\n      this.bgMusicPlaying = true;\n    } catch (err) {\n      console.log('Background music error:', err.message);\n    }\n  }\n\n  // Stop background music\n  stopBackgroundMusic() {\n    if (this.bgMusic) {\n      this.bgMusic.pause();\n      this.bgMusic.currentTime = 0;\n      this.bgMusicPlaying = false;\n    }\n  }\n\n  // Toggle mute\n  toggleMute() {\n    this.isMuted = !this.isMuted;\n    if (this.isMuted && this.bgMusic) {\n      this.bgMusic.volume = 0;\n    } else if (this.bgMusic) {\n      this.bgMusic.volume = 0.2;\n    }\n    return this.isMuted;\n  }\n\n  // Set mute state\n  setMuted(muted) {\n    this.isMuted = muted;\n    if (this.bgMusic) {\n      this.bgMusic.volume = muted ? 0 : 0.2;\n    }\n  }\n\n  // Check if muted\n  getMuted() {\n    return this.isMuted;\n  }\n}\n\n// Create singleton instance\nconst soundManager = new SoundManager();\n\n// Export convenience functions\nexport const preloadSounds = () => soundManager.preload();\nexport const playSound = (name, volume) => soundManager.playSound(name, volume);\nexport const playBackgroundMusic = volume => soundManager.playBackgroundMusic(volume);\nexport const stopBackgroundMusic = () => soundManager.stopBackgroundMusic();\nexport const toggleMute = () => soundManager.toggleMute();\nexport const setMuted = muted => soundManager.setMuted(muted);\nexport const isMuted = () => soundManager.getMuted();\nexport default soundManager;","map":{"version":3,"names":["soundUrls","correct","wrong","jumpscare","tick","timerWarning","gameStart","victory","bgMusic","SoundManager","constructor","sounds","isMuted","bgMusicPlaying","preload","Object","entries","forEach","name","url","audio","Audio","playSound","soundName","volume","currentTime","play","catch","err","console","log","message","playBackgroundMusic","loop","stopBackgroundMusic","pause","toggleMute","setMuted","muted","getMuted","soundManager","preloadSounds"],"sources":["/Users/peterrabbit/Documents/GitHub/Spookathon-2025/spooky-cat-calc-game/src/utils/sounds.js"],"sourcesContent":["// Sound system using online URLs - NO downloads needed!\n\nconst soundUrls = {\n  // Correct answer sounds\n  correct: 'https://www.soundjay.com/buttons/sounds/button-09.mp3',\n  \n  // Wrong answer sounds\n  wrong: 'https://www.soundjay.com/misc/sounds/fail-buzzer-01.mp3',\n  jumpscare: 'https://www.soundjay.com/misc/sounds/fail-buzzer-02.mp3',\n  \n  // Timer sounds\n  tick: 'https://www.soundjay.com/clock/sounds/clock-1.mp3',\n  timerWarning: 'https://www.soundjay.com/misc/sounds/bell-ringing-05.mp3',\n  \n  // Game sounds\n  gameStart: 'https://www.soundjay.com/misc/sounds/magic-chime-01.mp3',\n  victory: 'https://www.soundjay.com/misc/sounds/magic-chime-02.mp3',\n  \n  // Background music (optional - can be muted)\n  bgMusic: 'https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3'\n};\n\nclass SoundManager {\n  constructor() {\n    this.sounds = {};\n    this.isMuted = false;\n    this.bgMusic = null;\n    this.bgMusicPlaying = false;\n  }\n\n  // Preload sounds for better performance\n  preload() {\n    Object.entries(soundUrls).forEach(([name, url]) => {\n      if (name !== 'bgMusic') {\n        const audio = new Audio(url);\n        audio.preload = 'auto';\n        this.sounds[name] = audio;\n      }\n    });\n  }\n\n  // Play a sound effect\n  playSound(soundName, volume = 1.0) {\n    if (this.isMuted) return;\n    \n    try {\n      let audio;\n      \n      // Use preloaded sound or create new one\n      if (this.sounds[soundName]) {\n        audio = this.sounds[soundName];\n        audio.currentTime = 0; // Reset to start\n      } else {\n        audio = new Audio(soundUrls[soundName]);\n      }\n      \n      audio.volume = volume;\n      audio.play().catch(err => {\n        console.log('Audio play prevented:', err.message);\n      });\n    } catch (err) {\n      console.log('Audio error:', err.message);\n    }\n  }\n\n  // Play background music\n  playBackgroundMusic(volume = 0.2) {\n    if (this.isMuted || this.bgMusicPlaying) return;\n    \n    try {\n      this.bgMusic = new Audio(soundUrls.bgMusic);\n      this.bgMusic.volume = volume;\n      this.bgMusic.loop = true;\n      this.bgMusic.play().catch(err => {\n        console.log('Background music play prevented:', err.message);\n      });\n      this.bgMusicPlaying = true;\n    } catch (err) {\n      console.log('Background music error:', err.message);\n    }\n  }\n\n  // Stop background music\n  stopBackgroundMusic() {\n    if (this.bgMusic) {\n      this.bgMusic.pause();\n      this.bgMusic.currentTime = 0;\n      this.bgMusicPlaying = false;\n    }\n  }\n\n  // Toggle mute\n  toggleMute() {\n    this.isMuted = !this.isMuted;\n    \n    if (this.isMuted && this.bgMusic) {\n      this.bgMusic.volume = 0;\n    } else if (this.bgMusic) {\n      this.bgMusic.volume = 0.2;\n    }\n    \n    return this.isMuted;\n  }\n\n  // Set mute state\n  setMuted(muted) {\n    this.isMuted = muted;\n    \n    if (this.bgMusic) {\n      this.bgMusic.volume = muted ? 0 : 0.2;\n    }\n  }\n\n  // Check if muted\n  getMuted() {\n    return this.isMuted;\n  }\n}\n\n// Create singleton instance\nconst soundManager = new SoundManager();\n\n// Export convenience functions\nexport const preloadSounds = () => soundManager.preload();\nexport const playSound = (name, volume) => soundManager.playSound(name, volume);\nexport const playBackgroundMusic = (volume) => soundManager.playBackgroundMusic(volume);\nexport const stopBackgroundMusic = () => soundManager.stopBackgroundMusic();\nexport const toggleMute = () => soundManager.toggleMute();\nexport const setMuted = (muted) => soundManager.setMuted(muted);\nexport const isMuted = () => soundManager.getMuted();\n\nexport default soundManager;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}